// Test script to demonstrate the enhanced parser working with real PDF content

// Sample PDF content from the real exam
const samplePDFContent = `
–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –•—É–≤–∏–ª–±–∞—Ä –ê
–≠–ª—Å—ç–ª—Ç–∏–π–Ω –µ—Ä”©–Ω—Ö–∏–π —à–∞–ª–≥–∞–ª—Ç 2025

–ù—ç–≥–¥“Ø–≥—ç—ç—Ä —Ö—ç—Å—ç–≥. –°–û–ù–ì–û–• –î–ê–ê–õ–ì–ê–í–ê–†

1. ‚àö‚àö25‚Åµ –∏–ª—ç—Ä—Ö–∏–π–ª–ª–∏–π–Ω —É—Ç–≥—ã–≥ –æ–ª–æ–æ—Ä–æ–π.
A. ‚àö5 B. 5 C. 25 D. ‚Åµ‚àö5 E. 1/5

2. sin 1140¬∞ –∏–ª—ç—Ä—Ö–∏–π–ª–ª–∏–π–Ω —É—Ç–≥—ã–≥ –æ–ª–æ–æ—Ä–æ–π.
A. ‚àö3/2 B. 1/2 C. 0 D. -1/2 E. 1

3. {‚àö5, œÄ, 1.(12), 0, ‚àõ7, 12/7, ‚àö25} –æ–ª–æ–Ω–ª–æ–≥ ”©–≥”©–≥–¥”©–≤. –≠–Ω—ç –æ–ª–æ–Ω–ª–æ–≥–∏–π–Ω –±“Ø—Ö —ç–ª–µ–º–µ–Ω—Ç –Ω—å –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª —Ç–æ–æ –±–∞–π—Ö –¥—ç–¥ –æ–ª–æ–Ω–ª–æ–≥ –∞–ª—å –Ω—å –≤—ç?
A. {œÄ, ‚àõ7, ‚àö5, ‚àö25} B. {1.(12), 12/7} C. {‚àö5, œÄ, 12/7}
D. {‚àö5, œÄ, ‚àõ7} E. {‚àö5, œÄ, ‚àõ7, 12/7, 1.(12)}

22. A –±–∞ –í —Ö–æ—Ç—ã–Ω —Ö–æ–æ—Ä–æ–Ω–¥–æ—Ö –∑–∞–º—ã–Ω 0.6 —Ö—ç—Å–≥–∏–π–≥ I –º–∞—à–∏–Ω 9 —Ü–∞–≥—Ç, —Ö–∞—Ä–∏–Ω II –º–∞—à–∏–Ω –Ω–∏–π—Ç –∑–∞–º—ã–Ω 7/12 —Ö—ç—Å–≥–∏–π–≥ 14 —Ü–∞–≥—Ç —è–≤–¥–∞–≥ –±”©–≥”©”©–¥ —Ç—ç–¥–≥—ç—ç—Ä–∏–π–Ω —Ö—É—Ä–¥–Ω—ã –∑”©—Ä”©”© –Ω—å 27 –∫–º/—Ü –±–æ–ª —Ö–æ—ë—Ä —Ö–æ—Ç—ã–Ω —Ö–æ–æ—Ä–æ–Ω–¥–æ—Ö –∑–∞–π–≥ –æ–ª–æ–æ—Ä–æ–π.
A. 405 –∫–º B. 675 –∫–º C. 1728 –∫–º D. 1080 –∫–º E. 648 –∫–º

–•–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Ö—ç—Å—ç–≥. –ù”®–•”®–• –î–ê–ê–õ–ì–ê–í–ê–†

2.1. y = f(x) –∫–≤–∞–¥—Ä–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π–Ω –≥—Ä–∞—Ñ–∏–∫ Ox —Ç—ç–Ω—Ö–ª—ç–≥—Ç—ç–π (-6, 0), (14, 0) —Ü—ç–≥“Ø“Ø–¥—ç—ç—Ä —Ö–∞—Ä–∏–Ω Oy —Ç—ç–Ω—Ö–ª—ç–≥—Ç—ç–π (0, 42) —Ü—ç–≥—ç—ç—Ä –æ–≥—Ç–ª–æ–ª—Ü–¥–æ–≥ –±–∞–π–≤. y = |f(x)| –±–∞ y = k –º—É—Ä—É–π –¥”©—Ä–≤”©–Ω –µ—Ä”©–Ω—Ö–∏–π —Ü—ç–≥—Ç—ç–π –±–∞–π—Ö k ‚Äì –∏–π–Ω –±“Ø—Ö —É—Ç–≥—ã–≥ –æ–ª—ä—ë.

(1) –ö–≤–∞–¥—Ä–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π–Ω —Ç–æ–º—å—ë–æ–≥ –æ–ª–±–æ–ª f(x) = -0.a x¬≤ + b x + cd –±–æ–ª–Ω–æ. (3 –æ–Ω–æ–æ)
(2) –û—Ä–æ–π–Ω —Ü—ç–≥–∏–π–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã–≥ –æ–ª–±–æ–ª O(4, ef) (2 –æ–Ω–æ–æ)
(3) |f(x)| = k —Ç—ç–≥—à–∏—Ç–≥—ç–ª —è–ª–≥–∞–∞—Ç–∞–π –¥”©—Ä–≤”©–Ω —à–∏–π–¥—Ç—ç–π –±–∞–π—Ö k ‚Äì –∏–π–Ω —É—Ç–≥—É—É–¥ –Ω—å 0 < k < gh –±–∞–π–Ω–∞. (2 –æ–Ω–æ–æ)
`;

// Mock parser to test fallback extraction
class TestParser {
  constructor() {
    console.log('üß™ Testing Enhanced Parser with Real PDF Content');
  }

  // Simulate the hasPlaceholderContent check
  hasPlaceholderContent(data) {
    const jsonStr = JSON.stringify(data);
    return jsonStr.includes('[–≠–Ω–¥ –±–æ–¥–∏—Ç –∞—Å—É—É–ª—Ç—ã–Ω —Ç–µ–∫—Å—Ç –±–∞–π–Ω–∞]') ||
           jsonStr.includes('–ê—Å—É—É–ª—Ç 1 - [') ||
           jsonStr.includes('–•–∞—Ä–∏—É–ª—Ç A - –ê—Å—É—É–ª—Ç') ||
           jsonStr.includes('Fallback –∞—Å—É—É–ª—Ç');
  }

  // Use the fallback extraction method
  fallbackExtraction(markdown) {
    console.log('üîß Using fallback pattern matching extraction...');

    const examData = {
      "exams": {
        "2025_math_variant_A": {
          "metadata": {
            "title": "–≠–ª—Å—ç–ª—Ç–∏–π–Ω –µ—Ä”©–Ω—Ö–∏–π —à–∞–ª–≥–∞–ª—Ç 2025",
            "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫",
            "variant": "–•—É–≤–∏–ª–±–∞—Ä –ê",
            "year": 2025
          },
          "section1": {
            "title": "–ù—ç–≥–¥“Ø–≥—ç—ç—Ä —Ö—ç—Å—ç–≥. –°–û–ù–ì–û–• –î–ê–ê–õ–ì–ê–í–ê–†",
            "totalQuestions": 36,
            "totalPoints": 72,
            "questions": {}
          },
          "section2": {
            "title": "–•–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Ö—ç—Å—ç–≥. –ù”®–•”®–• –î–ê–ê–õ–ì–ê–í–ê–†",
            "pointsPerQuestion": 7,
            "questions": {}
          }
        }
      }
    };

    // Extract Section 1 questions
    this.extractSection1Questions(markdown, examData.exams["2025_math_variant_A"].section1);

    return examData;
  }

  // Extract questions using pattern matching
  extractSection1Questions(markdown, section1) {
    const lines = markdown.split('\n');
    let currentQuestion = null;
    let questionText = '';
    let options = {};

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      // Skip empty lines and headers
      if (!line || line.includes('–•—É–≤–∏–ª–±–∞—Ä') || line.includes('–≠–ª—Å—ç–ª—Ç–∏–π–Ω')) continue;

      // Look for question numbers 1-36
      const qMatch = line.match(/^(\d+)\.\s*(.+)/);
      if (qMatch && parseInt(qMatch[1]) >= 1 && parseInt(qMatch[1]) <= 36) {
        // Save previous question if exists
        if (currentQuestion && questionText && Object.keys(options).length === 5) {
          this.saveQuestion(section1, currentQuestion, questionText, options);
        }

        currentQuestion = qMatch[1];
        questionText = qMatch[2];
        options = {};
        continue;
      }

      // Look for options A-E
      const optMatch = line.match(/^([ABCDE])\.\s*(.+)/);
      if (optMatch && currentQuestion) {
        options[optMatch[1]] = optMatch[2];
        continue;
      }

      // Continue question text on next line
      if (currentQuestion && !line.match(/^[ABCDE]\./) && line.length > 0) {
        questionText += ' ' + line;
      }
    }

    // Save last question
    if (currentQuestion && questionText && Object.keys(options).length === 5) {
      this.saveQuestion(section1, currentQuestion, questionText, options);
    }
  }

  // Save question to section
  saveQuestion(section, questionNum, text, options) {
    const qNum = parseInt(questionNum);
    let points = 1;

    // Assign points based on question number
    if (qNum >= 1 && qNum <= 8) points = 1;
    else if (qNum >= 9 && qNum <= 28) points = 2;
    else if (qNum >= 29 && qNum <= 36) points = 3;

    section.questions[questionNum] = {
      text: text.trim(),
      points: points,
      options: { ...options }
    };

    console.log(`‚úÖ Extracted question ${questionNum}: ${text.substring(0, 50)}...`);
    console.log(`   Options: A=${options.A?.substring(0, 10)}... B=${options.B?.substring(0, 10)}... etc.`);
  }

  // Test the extraction
  testExtraction() {
    console.log('\nüöÄ TESTING FALLBACK EXTRACTION\n');

    const result = this.fallbackExtraction(samplePDFContent);

    console.log('\nüìä EXTRACTION RESULTS:');
    console.log(`Questions extracted: ${Object.keys(result.exams["2025_math_variant_A"].section1.questions).length}`);

    // Show specific examples
    const questions = result.exams["2025_math_variant_A"].section1.questions;

    if (questions["1"]) {
      console.log('\nüìù Question 1:');
      console.log(`Text: ${questions["1"].text}`);
      console.log(`Points: ${questions["1"].points}`);
      console.log(`Options:`, questions["1"].options);
    }

    if (questions["22"]) {
      console.log('\nüìù Question 22:');
      console.log(`Text: ${questions["22"].text}`);
      console.log(`Points: ${questions["22"].points}`);
      console.log(`Options:`, questions["22"].options);
    }

    return result;
  }
}

// Run the test
const tester = new TestParser();
const result = tester.testExtraction();

console.log('\nüéâ TEST COMPLETED! Real questions extracted without placeholders.');
console.log('\nüìÑ Full JSON preview:');
console.log(JSON.stringify(result, null, 2).substring(0, 1000) + '...');