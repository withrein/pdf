// Simple, reliable extraction method that WORKS!

const sampleContent = `
1. ‚àö‚àö25‚Åµ –∏–ª—ç—Ä—Ö–∏–π–ª–ª–∏–π–Ω —É—Ç–≥—ã–≥ –æ–ª–æ–æ—Ä–æ–π.
A. ‚àö5 B. 5 C. 25 D. ‚Åµ‚àö5 E. 1/5

2. sin 1140¬∞ –∏–ª—ç—Ä—Ö–∏–π–ª–ª–∏–π–Ω —É—Ç–≥—ã–≥ –æ–ª–æ–æ—Ä–æ–π.
A. ‚àö3/2 B. 1/2 C. 0 D. -1/2 E. 1

22. A –±–∞ –í —Ö–æ—Ç—ã–Ω —Ö–æ–æ—Ä–æ–Ω–¥–æ—Ö –∑–∞–º—ã–Ω 0.6 —Ö—ç—Å–≥–∏–π–≥ I –º–∞—à–∏–Ω 9 —Ü–∞–≥—Ç, —Ö–∞—Ä–∏–Ω II –º–∞—à–∏–Ω –Ω–∏–π—Ç –∑–∞–º—ã–Ω 7/12 —Ö—ç—Å–≥–∏–π–≥ 14 —Ü–∞–≥—Ç —è–≤–¥–∞–≥ –±”©–≥”©”©–¥ —Ç—ç–¥–≥—ç—ç—Ä–∏–π–Ω —Ö—É—Ä–¥–Ω—ã –∑”©—Ä”©”© –Ω—å 27 –∫–º/—Ü –±–æ–ª —Ö–æ—ë—Ä —Ö–æ—Ç—ã–Ω —Ö–æ–æ—Ä–æ–Ω–¥–æ—Ö –∑–∞–π–≥ –æ–ª–æ–æ—Ä–æ–π.
A. 405 –∫–º B. 675 –∫–º C. 1728 –∫–º D. 1080 –∫–º E. 648 –∫–º
`;

// SIMPLE EXTRACTION METHOD
function extractQuestions(content) {
  const questions = {};
  const lines = content.split('\n').map(line => line.trim()).filter(line => line);

  let currentQuestion = null;
  let questionText = '';

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Find question number (1. 2. 22. etc.)
    const qMatch = line.match(/^(\d+)\.\s*(.+)/);
    if (qMatch) {
      currentQuestion = qMatch[1];
      questionText = qMatch[2];
      console.log(`üìù Question ${currentQuestion}: ${questionText.substring(0, 30)}...`);
      continue;
    }

    // Find options line (starts with A.)
    if (line.startsWith('A.') && currentQuestion) {
      const options = parseOptionsLine(line);

      if (Object.keys(options).length === 5) {
        // Assign points
        const qNum = parseInt(currentQuestion);
        let points = 1;
        if (qNum >= 9 && qNum <= 28) points = 2;
        else if (qNum >= 29 && qNum <= 36) points = 3;

        questions[currentQuestion] = {
          text: questionText,
          points: points,
          options: options
        };

        console.log(`‚úÖ Saved question ${currentQuestion} with all 5 options`);
        currentQuestion = null;
      } else {
        console.log(`‚ö†Ô∏è  Question ${currentQuestion} only has ${Object.keys(options).length} options`);
      }
    }
  }

  return questions;
}

// SIMPLE OPTIONS PARSER
function parseOptionsLine(line) {
  const options = {};

  // Split by letter patterns and clean up
  const parts = line.split(/([ABCDE]\.)/).filter(part => part.trim());

  for (let i = 0; i < parts.length - 1; i += 2) {
    const letter = parts[i].replace('.', '');
    const text = parts[i + 1].trim();

    if (letter && text && ['A', 'B', 'C', 'D', 'E'].includes(letter)) {
      options[letter] = text;
      console.log(`   ${letter}: "${text}"`);
    }
  }

  return options;
}

// TEST THE EXTRACTION
console.log('üöÄ TESTING SIMPLE EXTRACTION METHOD\n');

const result = extractQuestions(sampleContent);

console.log('\nüéâ FINAL RESULTS:');
console.log(`Questions extracted: ${Object.keys(result).length}\n`);

Object.entries(result).forEach(([qNum, data]) => {
  console.log(`Question ${qNum} (${data.points} points):`);
  console.log(`  "${data.text}"`);
  console.log(`  Options:`);
  Object.entries(data.options).forEach(([letter, text]) => {
    console.log(`    ${letter}. ${text}`);
  });
  console.log('');
});

// Generate JSON
const examData = {
  "exams": {
    "2025_math_variant_A": {
      "metadata": {
        "title": "–≠–ª—Å—ç–ª—Ç–∏–π–Ω –µ—Ä”©–Ω—Ö–∏–π —à–∞–ª–≥–∞–ª—Ç 2025",
        "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫",
        "variant": "–•—É–≤–∏–ª–±–∞—Ä –ê",
        "year": 2025
      },
      "section1": {
        "title": "–ù—ç–≥–¥“Ø–≥—ç—ç—Ä —Ö—ç—Å—ç–≥. –°–û–ù–ì–û–• –î–ê–ê–õ–ì–ê–í–ê–†",
        "totalQuestions": 36,
        "totalPoints": 72,
        "questions": result
      }
    }
  }
};

console.log('üî• SUCCESS! Real questions extracted without any placeholders!');
console.log('\nüìÑ JSON Output:');
console.log(JSON.stringify(examData, null, 2));